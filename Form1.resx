<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txtQuerie.Text" xml:space="preserve">
    <value>SELECT * FROM (
WITH CTE_GESTAO_ODONTO AS (
SELECT ID_INDIVIDUO
FROM GESTAO_ODONTO
WHERE SITUACAO IN (0, 5)
GROUP BY ID_INDIVIDUO),
CTE_GLICEMIA AS (
    SELECT
        PA.ID_PACIENTE AS ID_INDIVIDUO,
        PA.ID AS COD_ATEND,
        COUNT(*) AS QUANTIDADE
    FROM PEP_REQUISICAO_EXAME RE
        JOIN PEP_ATENDIMENTO PA ON PA.ID = RE.ID_ATENDIMENTO
        JOIN TSI_CADEXAMES EX ON EX.CSI_CODEXA = RE.ID_EXAME
        JOIN PEP_CONDICAO_AVALIADA CA ON CA.CSI_ID_ATEND = PA.ID AND
        ((CA.ID_CIAP IN ('T89','T90','W85')) OR
        (CA.ID_CID IN ('E10','E100', 'E101','E102','E103','E104','E105','E106','E107',
        'E108','E109','E11', 'E110','E111','E112','E113','E114','E115',
        'E116','E117','E118','E119','E12', 'E120','E121','E122','E123',
        'E124','E125','E126','E127','E128','E129','E13', 'E130','E131',
        'E132','E133','E134','E135','E136','E137','E138','E139','E14',
        'E140','E141','E142','E143','E144','E145','E146','E147','E148',
        'E149','O24', '0240','O241','O242','O243','O244','O249','P702')))
    WHERE (SUBSTRING(PA.ID_CBO FROM 1 FOR 4) IN ('2251', '2252', '2253', '2231', '2235')) AND
    (SELECT PAI FROM PRO_PROCEDIMENTO_PAI(EX.CSI_CODSUS)) IN ('0202010503')
    GROUP BY PA.ID_PACIENTE, PA.ID
)
SELECT    
GLICE.COD_ATEND AS ATEND_C_GLIC,
GLICE.ID_INDIVIDUO AS ATEND_IND_COM_GLIC,
C.CSI_MAEPAC as MAE_INDIVIDUO,
C.CSI_PAIPAC AS PAI_INDIVIDUO,
EQ.NOME_REFERENCIA AS EQUIPE2,
CASE WHEN COALESCE(C.FORA_AREA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FORA_AREA,
CASE WHEN COALESCE(C.FREQ_CURANDEIRO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FREQ_CURANDEIRO,
CASE WHEN COALESCE(C.POSSUI_PLANO_SAUDE, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS POSSUI_PLANO_SAUDE,
CASE WHEN COALESCE(C.VERIFICA_DEFICIENCIA, 0) = 1 THEN 'SIM' ELSE 'NÃO' END AS VERIFICA_DEFICIENCIA,
CASE WHEN COALESCE(C.DEF_AUDITIVA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DEF_AUDITIVA,
CASE WHEN COALESCE(C.DEF_VISUAL, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DEF_VISUAL,
CASE WHEN COALESCE(C.DEF_INTELECTUAL, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DEF_INTELECTUAL,
CASE WHEN COALESCE(C.DEF_FISICA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DEF_FISICA,
CASE WHEN COALESCE(C.DEF_OUTRA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DEF_OUTRA,
C.CSI_DATA_OBITO,
CASE WHEN COALESCE(C.VERIFICA_CARDIACA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS VERIFICA_CARDIACA,
CASE WHEN COALESCE(C.INSULF_CARDIACA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS INSULF_CARDIACA,
CASE WHEN COALESCE(C.CARDIACA_NSABE, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS CARDIACA_NSABE,
CASE WHEN COALESCE(C.CARDIACA_OUTRO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS CARDIACA_OUTRO,
CASE WHEN COALESCE(C.VERIFICA_RINS, 0) = 1 THEN 'SIM' ELSE 'NÃO' END AS VERIFICA_RINS,
CASE WHEN C.DIABETES_TIPO = 0 THEN 'Tipo 1' WHEN C.DIABETES_TIPO = 1 THEn 'Tipo 2' ELSE 'Não Informado' END AS DIABETES_TIPO,
CASE WHEN C.DIABETES_PE = 0 THEN 'SIM' WHEN C.DIABETES_PE = 1 then 'NÃO' ELSE '' END AS DIABETES_PE,
CASE WHEN C.DIABETES_MEMBRO_AMPUTADO = 0 THEN 'SIM' WHEN C.DIABETES_MEMBRO_AMPUTADO = 1 then 'NÃO' ELSE '' END AS DIABETES_MEMBRO_AMPUTADO,
C.DIABETES_MEMBRO,
C.ESUS_DIAGNOSTICO_PROB_MENTAL,
CASE WHEN COALESCE(C.RINS_INSULFICIENCIA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS RINS_INSULFICIENCIA,
CASE WHEN COALESCE(C.RINS_NSABE, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS RINS_NSABE,
CASE WHEN COALESCE(C.RINS_OUTROS, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS RINS_OUTROS,
CASE WHEN COALESCE(C.DOENCA_RESPIRATORIA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DOENCA_RESPIRATORIA,
CASE WHEN COALESCE(C.RESP_ASMA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS RESP_ASMA,
CASE WHEN COALESCE(C.RESP_ENFISEMA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS RESP_ENFISEMA,
CASE WHEN COALESCE(C.RESP_NSABE, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS RESP_NSABE,
CASE WHEN COALESCE(C.RESP_OUTRO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS RESP_OUTRO,
CASE WHEN COALESCE(C.INTERNACAO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS INTERNACAO,
C.INTERNACAO_CAUSA,
CASE WHEN COALESCE(C.PLANTAS_MEDICINAIS, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS PLANTAS_MEDICINAIS,
UPPER(C.QUAIS_PLANTAS) AS QUAIS_PLANTAS,
CASE WHEN COALESCE(C.TRATAMENTO_PSIQ, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS TRATAMENTO_PSIQ,
CASE WHEN COALESCE(C.SITUACAO_PESO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS SITUACAO_PESO,
CASE WHEN COALESCE(C.DOMICILIADO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DOMICILIADO,
CASE WHEN COALESCE(C.ACAMADO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS ACAMADO,
CASE WHEN COALESCE(C.CANCER, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS CANCER,
CASE WHEN COALESCE(C.FUMANTE, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FUMANTE,
CASE WHEN COALESCE(C.DROGAS, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DROGAS,
CASE WHEN COALESCE(C.ALCOOL, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS ALCOOL,
CASE WHEN COALESCE(C.DIABETES, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DIABETES,
CASE WHEN COALESCE(C.AVC_DERRAME, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS AVC_DERRAME,
CASE WHEN COALESCE(C.HIPERTENSO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS HIPERTENSO,
CASE WHEN COALESCE(C.INFARTO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS INFARTO,
CASE WHEN COALESCE(C.TUBERCULOSE, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS TUBERCULOSE,
CASE WHEN COALESCE(C.HANSENIASE, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS HANSENIASE,
CASE WHEN COALESCE(C.PRATICAS_COMPLEM, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS PRATICAS_COMPLEM,
C.OUTRAS_CONDIC_01,
CASE WHEN COALESCE(C.VERIF_SITUACAO_RUA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS VERIF_SITUACAO_RUA,
CASE WHEN COALESCE(C.VISITA_FAMILIAR, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS VISITA_FAMILIAR,
CASE WHEN COALESCE(C.ACESSO_HIGIENTEP, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS ACESSO_HIGIENTEP,
CASE WHEN COALESCE(C.BANHO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS BANHO,
CASE WHEN COALESCE(C.ACESSO_SANIT, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS ACESSO_SANIT,
CASE WHEN COALESCE(C.HIGIENE_BUCAL, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS HIGIENE_BUCAL,
CASE WHEN COALESCE(C.HIGIENE_OUTROS, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS HIGIENE_OUTROS,
CASE WHEN COALESCE(C.SIT_RUA_BENEFICIO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS SIT_RUA_BENEFICIO,
CASE WHEN COALESCE(C.SIT_RUA_FAMILIAR, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS SIT_RUA_FAMILIAR,
CASE WHEN COALESCE(C.RESTAURANTE_POPU, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS RESTAURANTE_POPU,
CASE WHEN COALESCE(C.DOAC_RESTAURANTE, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DOAC_RESTAURANTE,
CASE WHEN COALESCE(C.DOAC_GRUP_RELIG, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DOAC_GRUP_RELIG,
CASE WHEN COALESCE(C.DOACAO_POPULAR, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DOACAO_POPULAR,
CASE WHEN COALESCE(C.DOACAO_OUTROS, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS DOACAO_OUTROS,
C.CSI_NOMPAC as INDIVIDUO,
C.CSI_DTNASC as DATA_NASCIMENTO,
C.CSI_CODPAC as PRONTUARIO,
C.CSI_CPFPAC as CPF,
C.CSI_NCARTAO as CARTAO_SUS,
TL.CSI_NOMEND,
CD.TIPO_LOGRADOURO,
CD.TIPO_IMOVEL,
CD.QTD_COMODOS,
TB.CSI_NOMBAI as BAIRRO_DOMICILIO,
TC.CSI_NOMCID as CIDADE_DOMICILIO,
EQ.DSC_AREA as EQUIPE,
ME.CSI_NOMMED as MICROAREA,
TE.CSI_SIGEST as UF,
ES.NOME_FANTASIA as UNIDADE_SAUDE,
case when (F.SITUACAO_CADASTRO = 0) then 'BAIXADO'
when (F.SITUACAO_CADASTRO = 1) then 'ATIVO'
when (F.SITUACAO_CADASTRO = 2) then 'MUDOU-SE'
else 'OUTROS' end as SITUACAO_CADASTRO_FAMILIA,
case when (F.AREA_PROD_RURAL = 0) then 'PROPRIETARIO'
when (F.AREA_PROD_RURAL = 1) then 'PARCEIRO / MEEIRO'
when (F.AREA_PROD_RURAL = 3) then 'ASSENTADO'
when (F.AREA_PROD_RURAL = 4) then 'POSSEIRO'
when (F.AREA_PROD_RURAL = 5) then 'ARRENDATARIO'
when (F.AREA_PROD_RURAL = 6) then 'COMODATARIO'
when (F.AREA_PROD_RURAL = 7) then 'BENEFICIARIO DO BANCO DA TERRA'
when (F.AREA_PROD_RURAL = 8) then 'NÃO SE APLICA'
else 'NÃO INFORMADO' end as AREA_PRODUCAO_RURAL,
case when(F.TRAT_AGUA = 0) then 'FILTRADA'
when (F.TRAT_AGUA = 1) then 'FERVIDA'
when (F.TRAT_AGUA = 2) then 'CLORADA'
when (F.TRAT_AGUA = 3) then 'MINERAL'
when (F.TRAT_AGUA = 4) then 'SEM TRATAMENTO'
else 'NÃO INFORMADO' end as TRATAMENTO_AGUA,
case when (F.DESTINO_LIXO = 0) then 'COLETADO'
when (F.DESTINO_LIXO = 1) then 'QUEIMADO / ENTERRADO'
when (F.DESTINO_LIXO = 2) then 'CEU ABERTO'
when (F.DESTINO_LIXO = 3) then 'OUTRO'
else 'NÃO INFORMADO' end as DESTINO_LIXO,
F.ID,
F.NUM_PRONTUARIO_FAMILIAR,
F.ID_DOMICILIO,
CD.ID as VS_ESTABELECIMENTOS_ID,
COALESCE (CD.ID_MICROAREA,0) ID_MICROAREA,
MI.ID as ESUS_MICROAREA_ID,
MI.ID_EQUIPE,
MI.ID_PROFISSIONAL, C.ID_FAMILIA,
F.SITUACAO_CADASTRO,
F.ID_RESPONSAVEL,
EQ.ID as ESUS_EQUIPES_ID, case when
(CD.ZONA = 0) then 'URBANA' when
(CD.ZONA = 1) then 'RURAL' else
'NÃO INFORMADO' end as ZONA_RESIDENCIA, case when
(CD.TIPO_DOMICILIO = 0) then 'CASA' when
(CD.TIPO_DOMICILIO = 1) then 'APARTAMENTO'
when (CD.TIPO_DOMICILIO = 2) then 'COMODO'
when (CD.TIPO_DOMICILIO = 3) then 'OUTRO'
else 'NÃO INFORMADO' end as TIPO_DOMICILIO, case when
(CD.TIPO_ACESSO_DOMIC = 0) then
'PAVIMENTO' when
(CD.TIPO_ACESSO_DOMIC = 1) then
'CHÃO BATIDO' when
(CD.TIPO_ACESSO_DOMIC = 2) then 'FLUVIAL'
when (CD.TIPO_ACESSO_DOMIC = 3) then
'OUTRO' else 'NÃO INFORMADO' end as TIPO_ACESSO, case when
(CD.DISPONIB_ENERGIA = 'T') then 'SIM'
when (CD.DISPONIB_ENERGIA = 'T') then
'NÃO' else 'NÃO INFORMADO' end as DISPONIBILIDADE_ENERGIA,
case when (CD.MAT_PREDOMINANTE = 0) then
'Alvenaria/tijolo com Revestimento' when
(CD.MAT_PREDOMINANTE = 1) then
'Alvenaria/tijolo sem Revestimento' when
(CD.MAT_PREDOMINANTE = 2) then
'Taipa com Revestimento' when
(CD.MAT_PREDOMINANTE = 3) then
'Taipa sem Revestimento' when
(CD.MAT_PREDOMINANTE = 4) then
'Outros | Madeira aparelhada' when
(CD.MAT_PREDOMINANTE = 5) then
'Outros | Material aproveitado' when
(CD.MAT_PREDOMINANTE = 6) then
'Outros | Palha' when
(CD.MAT_PREDOMINANTE = 7) then
'Outros | Outro material' else 'NÃO INFORMADO'
end as MATERIAL_PREDOMINANTE, case when
(CD.ABASTECIMENTO_AGUA = 0) then
'Rede encanada ate o Domicilio' when
(CD.ABASTECIMENTO_AGUA = 1) then
'Carro pipa' when
(CD.ABASTECIMENTO_AGUA = 2) then
'Poco | Nascente no Domicilio' when
(CD.ABASTECIMENTO_AGUA = 3) then
'Cisterna' when
(CD.ABASTECIMENTO_AGUA = 4) then 'Outro'
else 'NÃO INFORMADO' end as ABASTECIMENTO_AGUA, 
cast
(CD.LATITUDE as varchar
(8191)) as LAT_DOMICILIO, 
case when
(CD.ESCOAMENTO_SANITA = 0) then
'Rede coletora de Esgoto ou Pluvial' when
(CD.ESCOAMENTO_SANITA = 1) then
'Fossa Septica' when
(CD.ESCOAMENTO_SANITA = 2) then
'Fossa Rudimentar' when
(CD.ESCOAMENTO_SANITA = 3) then
'Direto para um rio, lago ou mar' when
(CD.ESCOAMENTO_SANITA = 4) then
'Ceu aberto' when
(CD.ESCOAMENTO_SANITA = 5) then
'Outra forma' else 'NÃO INFORMADO'
end as ESCOAMENTO_SANITARIO, case when
(F.SITUACAO_MORADIA = 0) then 'Próprio' when
(F.SITUACAO_MORADIA = 1) then 'Financiado' when
(F.SITUACAO_MORADIA = 2) then 'Alugado' when
(F.SITUACAO_MORADIA = 3) then 'Arrendado' when
(F.SITUACAO_MORADIA = 4) then 'Cedido' when
(F.SITUACAO_MORADIA = 5) then 'Ocupado' when
(F.SITUACAO_MORADIA = 6) then 'Situação de Rua'
when (F.SITUACAO_MORADIA = 7) then 'Outra' else
'Não Informado' end as SITUACAO_MORADIA, case when
(F.RENDA_FAMILIAR_SAL_MIN = 0) then 'Ate 1/4'
when (F.RENDA_FAMILIAR_SAL_MIN = 1) then
'Ate 1/2' when (F.RENDA_FAMILIAR_SAL_MIN = 2)
then 'Ate 1' when (F.RENDA_FAMILIAR_SAL_MIN = 3)
then 'Ate 2' when (F.RENDA_FAMILIAR_SAL_MIN = 4)
then 'Ate 3' when (F.RENDA_FAMILIAR_SAL_MIN = 5)
then 'Ate 4' when (F.RENDA_FAMILIAR_SAL_MIN = 6)
then 'Maior que 4' else 'Não Informado'
end as RENDA_FAMILIAR, 
case when
(C.DIABETES = 'T') then 'SIM' else 'NÃO'
end as DIABETICO, case when
(C.CSI_SEXPAC = 'Masculino') then 'Masculino' when
(C.CSI_SEXPAC = 'Feminino') then 'Feminino' else
'Não Informado' end as SEXO, case when
(C.CSI_CORPAC = 'Amarela') then 'Amarela' when
(C.CSI_CORPAC = 'Branca') then 'Branca' when
(C.CSI_CORPAC = 'Indígena') then 'Indígena' when
(C.CSI_CORPAC = 'Parda') then 'Parda' when
(C.CSI_CORPAC = 'Preta') then 'Preta' else
'Não Informado' end as COR,
(datediff (day,C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) as IDADE, case when ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 12) then 'CRIANÇA' when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS TIMESTAMP)) / 365) &gt; 12) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt; 18)) then 'JOVEM' when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt;= 18) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt; 60)) then 'ADULTO' when ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt;= 60) then 'IDOSO' else 'OUTROS'
end as FAIXA_ETARIA, 
case when ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 5) then 5 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 5) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 10)) then 10 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 10) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 15)) then 15 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 15) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 20)) then 20 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 20) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 25)) then 25 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 25) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 30)) then 30 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 30) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 35)) then 35 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 35) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 40)) then 40 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 40) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 45)) then 45 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 45) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 50)) then 50 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 50) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 55)) then 55 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 55) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 60)) then 60 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 60) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 65)) then 65 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 65) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 70)) then 70 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 70) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 75)) then 75 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 75) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 80)) then 80 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 80) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 85)) then 85 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 85) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 90)) then 90 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 90) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 95)) then 95 when (((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &gt; 95) and ((datediff (day,
C.CSI_DTNASC, CAST (CURRENT_TIMESTAMP AS
TIMESTAMP)) / 365) &lt;= 100)) then 100 else 105
end as GRUPO_IDADE,
COALESCE( C.NOME_SOCIAL,'') AS NOMESOCIAL,
COALESCE(c.CSI_CELULAR,'')AS CELULAR,
PEP.DATA AS data_atendimento,
PEP.ID AS CODIGOATENDIEMNTO,
EQATEND.DSC_AREA AS EQUIPE_ATENDIMENTO,
MEATEND.CSI_NOMMED AS PROF_ATENDIMENTO,
TUATENDI.CSI_NOMUNI AS UNIDADE_ATENDIMENTO,
    C.QUILOSEMAGRECIMENTO,
   CASE WHEN COALESCE(C.FLG_USA_INSULINA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_USA_INSULINA,
    C.TEMPO_DIAGNOSTICO_DIABETE, 
    C.CONSUMO_DIARIO_INSULINA,
    C.ANO_INSULINA, 
   CASE WHEN COALESCE(PEP.FLG_PACIENTE_ACOMPANHADO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_PACIENTE_ACOMPANHADO,
CASE WHEN COALESCE (C.FLG_INCONTINENCIAURINARIA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_INCONTINENCIAURINARIA,
CASE WHEN COALESCE (C.FLG_ULCERAGASTROINTESTINAL, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_ULCERAGASTROINTESTINAL,
CASE WHEN COALESCE (C.FLG_RETINOPATIA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_RETINOPATIA,
CASE WHEN COALESCE (C.FLG_AUTISTA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_AUTISTA,
CASE WHEN COALESCE (C.FLG_EPILEPSIA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_EPILEPSIA,
CASE WHEN COALESCE (C.FLG_ANSIEDADE, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_ANSIEDADE,
CASE WHEN COALESCE (C.FLG_DEPRESSAO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_DEPRESSAO,
CASE WHEN COALESCE (C.FLG_ANEMIA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_ANEMIA,
CASE WHEN COALESCE (C.FLG_DEMENCIA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_DEMENCIA,
CASE WHEN COALESCE (C.FLG_INSULINA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_INSULINA,
CASE WHEN COALESCE (C.FLG_PRESSORICOS, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_PRESSORICOS,
CASE WHEN COALESCE (C.FLG_CIRURGIAPREVIA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_CIRURGIAPREVIA,
CASE WHEN COALESCE (C.FLG_EMAGRECIMENTO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_EMAGRECIMENTO ,   
CASE WHEN COALESCE (C.FLG_OUTRAS_CONDICOES, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_OUTRAS_CONDICOES,
CASE WHEN COALESCE (C.FLG_CONDICOESCARDIOVASCULARES, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_CONDICOESCARDIOVASCULARES,
CASE WHEN COALESCE (C.FLG_HIPERTROFICAVENTRICULO, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_HIPERTROFICAVENTRICULO,
CASE WHEN COALESCE (C.FLG_REVASCULARIZACAOMIOCARDICA, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_REVASCULARIZACAOMIOCARDICA,
CASE WHEN COALESCE (C.FLG_DOENCAVASCULAR, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_DOENCAVASCULAR,
CASE WHEN COALESCE (C.FLG_DOENCAARTERIAL, 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS FLG_DOENCAARTERIAL,
CASE WHEN COALESCE (C.SEDENTARISMO , 'F') = 'T' THEN 'SIM' ELSE 'NÃO' END AS SEDENTARISMO,
    C.TIPOCIRURGIAPREVIA,
    C.ANOCIRURGIAPREVIA
from TSI_CADPAC C
join VW_TSI_CADPAC VCP on C.CSI_CODPAC = VCP.CSI_CODPAC
JOIN ESUS_FAMILIA F ON F.ID = C.ID_FAMILIA
JOIN VS_ESTABELECIMENTOS CD ON CD.ID = F.ID_DOMICILIO
LEFT JOIN TSI_MEDICOS ME ON ME.CSI_CODMED = C.COD_AGEESUS
LEFT JOIN ESUS_MICROAREA MI ON (MI.ID_PROFISSIONAL = ME.CSI_CODMED)
LEFT JOIN ESUS_EQUIPES EQ ON EQ.ID = MI.ID_EQUIPE
LEFT JOIN ESUS_ESTABELECIMENTO_SAUDE ES ON ES.ID = EQ.ID_ESTABELECIMENTO
LEFT JOIN TSI_LOGRADOURO TL on TL.CSI_CODEND = CD.ID_LOGRADOURO
LEFT JOIN TSI_BAIRRO TB on TB.CSI_CODBAI = TL.CSI_CODBAI
LEFT JOIN TSI_CIDADE TC on TC.CSI_CODCID = TB.CSI_CODCID
LEFT JOIN TSI_ESTADO TE on TE.CSI_CODEST = TC.CSI_CODEST
LEFT JOIN TSI_UNIDADE UNI ON UNI.CSI_CNES = ES.CNES
LEFT JOIN TSI_PROFIS PROF ON PROF.CSI_CODPRO = C.CSI_CODPRO
LEFT JOIN TSI_CIDADE CIDNAT ON CIDNAT.CSI_CODCID = C.CSI_CODNAT
LEFT JOIN CTE_GESTAO_ODONTO GO ON GO.ID_INDIVIDUO = C.CSI_CODPAC
LEFT JOIN PEP_Atendimento PEP ON PEP.id_paciente = c.CSI_CODPAC AND (EXTRACT (YEAR FROM PEP.DATA) &gt;= EXTRACT (YEAR FROM CURRENT_TIMESTAMP)-5 )
LEFT JOIN tsi_medicos MEATEND ON MEATEND.CSI_CODMED = PEP.ID_MEDICO
LEFT JOIN ESUS_EQUIPES EQATEND ON PEP.ID_EQUIPE = EQATEND.ID
LEFT JOIN TSI_UNIDADE TUATENDI ON TUATENDI.CSI_CODUNI =PEP.ID_UNIDADE 
LEFT JOIN CTE_GLICEMIA GLICE ON GLICE.COD_ATEND = PEP.ID)
</value>
  </data>
</root>